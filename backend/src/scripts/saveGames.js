const { Pool } = require("pg")
const gamesData = require("../../../data/2023-24_NBA_season_games.json")
const teams = require("../../../data/teams.json")

const pool = new Pool({
    user: 'ctqmvlqf',
    host: 'ruby.db.elephantsql.com',
    database: 'ctqmvlqf',
    port: 5432,
    password: 'pdZjkxf-n-wtvBPlpCZR4B8DY79dH996',
    max: 150,
    min: 0
})


// GAME OBJECT EXAMPLE
// const game = {
//     game_id: 'Generated by database',
//     season: 2024,
//     date: date, //2024-04-16
//     start_time: time, // 7:30PM ET
//     home_team_id: number,
//     home_team_score: number,
//     away_team_id: number,
//     away_team_score: number,
//     status: "FINAL",
//     period: 4,
//     postseason: false,
//     time_left: "", // "3:14" or empty string if game is over
// }


async function saveGame(game) {


    // default values
    const season = 2024, status = "FINAL", period = 4, postseason = false, time_left = ""

    // things to do

    // divide game start_time into date and start time variables
    // game time subtract 6 hours!
    // filter teams json and get team ids to pass in place of team names

    // given "2023-10-25T23:00:00+00:00" -> ["2023-10-25", 23:00:00+00:00]
    // const dateTimeSplit = game.start_time.split("T")

    // // should be formatted to YYYY-MM-DD -> "2023-10-25"
    // const date = dateTimeSplit[0]

    // // 23:00:00+00:00 -> 23:00:00
    // const startTimeSplit = dateTimeSplit.split("+")[0]
    // const startTimeHourToInteger = parseInt(startTimeSplit.split(":")[0])
    // const startTimeHourToEST = startTimeHourToInteger - 18

    // Define the UTC date/time string
    const gameDateTimeInUTC = game.start_time;

    // Create a Date object from the UTC string
    const utcDate = new Date(gameDateTimeInUTC);

    // GET DATE AND TIME IN EST
    const estDate = new Date(utcDate.toLocaleString('en-US', {timeZone: 'America/New_York'}))

    // format date string as YYYY-MM-DD
    const estDateString = estDate.toISOString().split('T')[0]

    // format time string without seconds -> 3:30 PM
    const estTimeString = estDate.toLocaleTimeString('en-US', { hour: 'numeric', minute: 'numeric', hour12: true})

    // console.log(estDateString, estTimeString)

    // filter given team names against teams.json
    const home_team = teams.teams.filter((team) => team.name.toUpperCase() === game.home_team)[0]
    const away_team = teams.teams.filter((team) => team.name.toUpperCase() === game.away_team)[0]


    const home_team_id = home_team.team_id
    const away_team_id = away_team.team_id


    // console.log(home_team_id, away_team_id)

    const values = [
        season,
        estDateString,
        estTimeString,
        home_team_id,
        game.home_team_score,
        away_team_id,
        game.away_team_score,
        status,
        period,
        postseason,
        time_left
    ]

    const query = "INSERT INTO games (season, date, start_time, home_team_id, home_team_score, away_team_id, away_team_score, status, period, postseason, time_left) VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11) RETURNING *"

    try {
        await pool.query(query, values)
    } catch (error) {
        console.log(`Error adding game: ${error}`)
    }
}

async function saveGames() {
    for (const game of gamesData.games) {
        await saveGame(game)
    }
}

saveGames()
    .then(() => {
        console.log(`All games inserted successfully!`)
    })
    .catch(error => {
        console.error(error)
        throw error
    })